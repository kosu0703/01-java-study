package com.ict.day17;

public class Ex08 {

/*
	함수형 프로그래밍과 람다식
	
	- 메서드와 함수의 차이 : 클래스 안에 존재하는 함수를 메서드라 하고,
					별도로 만들 수 있는 함수를 Function(함수)이라 한다.
					기능적으로는 똑같다. (단, 자바에서는 함수가 없다. 무조건 메서드)						
	
	- 함수형 프로그래밍 : 함수의 구현과 호출만으로 프로그램을 만들 수 있는 프로그래밍 방식을 말한다.
	
	- **람다식 : 함수형 프로그래밍에서 사용하는 방식으로,
			1) 코드가 매우 간결해진다.
			2) 컬렉션 요소(대용량 데이터)를 필터링 또는 매핑을 쉽게 집계 (Stream 스트림)
		
		자바에서는 람다식을 함수형 인터페이스의 익명 구현 객체로 취급한다.
			( 람다식 > 매개변수를 가진 코드블록 > 익명 구현 객체 )
		**함수형 인터페이스란 추상메서드가 하나인 인터페이스를 말한다.
		만약에 추상메서드가 두 개이상이면 어떤 메서드를 구현하는 것인지 모호해진다.
		이를 방지하기 위해서 @FunctionalInterface 어노테이션을 사용해서 컴파일 오류를 발생하게 한다.	
			
		형식) ([매개변수]) -> { 실행문 }; 
	
			일반 메서드					>>>		람다식 : 1.반환형과 이름 삭제, 2.([매개변수]) -> {}  				
		int add(int x, int y){				(int x, int y) -> { 
			return x + y;						return x + y;
		}									}
		
		1. 매개변수 자료형과 괄호 () 생략하기
			매개변수의 자료형은 생략할 수 있다.
			(x, y) -> { return x + y; }
			
			만약에 매개변수가 하나이면 () 생략할 수 있다.
			x -> { x + 10; }
		
		2. 중괄호 {} 생략하기
			블록의 구현부분이 한 문장인 경우 {} 생략할 수 있다.
			(단, return 문이 있으면 {} 생략 불가)
			(x, y) -> { return x + y; }
			
			x -> x + 10;
			
		3. return 생략하기
			구현부분{} 안에 return 문이 하나라면 {} 와 return 문 모두 생략하고 식만 사용
			(x, y) -> x + y;
		
		
*/
	
}
