package com.ict.day18;
/*
	Stream : 컬렉션(배열포함)의 저장 요소를 하나씩 참조
			람다식으로 처리할 수 있는 클래스
			컬렉션, 배열 데이터 소스를 표준화된 방법으로 다루기 위한 것
			
		순서)	스트림 생성	-> 중간처리 -> 최종처리
			
			1. 스트림 생성 : 컬렉션, 배열을 Stream 클래스로 변환 시킴 
 			
 			2. 중간처리 : 여러번 반복 사용 가능, 결과가 스트림으로 나옴
 					filter(조건식) : 조건에 안 맞는 요소 제외
 					distinct() : 중복제거
 					sorted() : 정렬
 					limit(갯수) : 갯수만큼 자르기
 					skip(갯수) : 갯수만큼 건너뛰기
 					peek() : 작업 사이에 넣어서 중간 결과를 받을때 주로 사용 (요소전체 반복, 중간처리)
 					map() : 요소 변환(변경)
 					flatMap() : 요소 변환(변경)
 			
 			3. 최종처리 : 한번만 실행 가능, 스트림 요소 소모, 결과가 스트림이 아님
 						**스트림이 닫혀서 스트림을 다시 호출할 수 없다.
 					forEach() : 요소 전체를 반복
 					count() : 갯수
 					max() : 최대
 					min() : 최소
 					allMatch(조건식) : 모두 만족 true
 					anyMatch(조건식) : 하나라도 만족 true
 					noneMatch(조건식): 모두 불만족 true
 					toArray() : 모든 요소를 배열로 반환 (for 문으로 처리할 수 있다.)
 					reduce : 스트림의 요소를 하나씩 줄여가면서 계산한다.
 								sum(), count()
 					collect : 스트림의 요소를 수집한다.
 					
 					** 보통 filter()와 같이 사용된다.
 					findAny() : 아무거나 하나 반환 
 					findFirst() : 첫번째 요소 반환
 					
 */
public class Ex01 {

}
